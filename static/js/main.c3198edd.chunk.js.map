{"version":3,"sources":["Components/Navigation/NavElem.js","Components/Navigation/NavBar.js","Algorithms/Bubblesort.js","Algorithms/Insertionsort.js","Algorithms/Mergesort.js","Components/Main/ArrayElem.js","Components/Main/Main.js","Utils/Functions.js","App.js","Utils/Animation.js","serviceWorker.js","index.js"],"names":["NavElem","title","algoNumber","setAlgorithm","currentAlgorithm","animationRunning","className","parseInt","onClick","NavBar","swap","array","algorithm","id","ArrayElem","this","props","sorted","special","style","React","Component","Main","printArray","len","length","width","Math","round","margin","floor","first","firstIndex","second","secondIndex","leftBorder","rightBorder","mid","notNull","elemStyle","marginLeft","map","c","i","a","height","key","index","arrayIsSorted","arr","createNewArray","elems","max","allValues","Array","keys","splice","random","getBubbleSortSwap","n","elementsSwapped","push","temp","bubbleSort","getInsertionSortSwap","j","correctPosition","insertionSort","mergeSort","l","r","inMergeSort","swapped","moved","firstBigger","x","merge","animation","Animation","setState","bubbleSortStep","shift","insertionSortStep","undefined","mergeSortStep","speed","algo","slice","animate","alert","finished","clearInterval","interval","step","setInterval","endAnimation","App","state","minElems","maxElems","numberOfElements","animationSpeed","nr","changeAlgorithm","changeSpeed","e","newSpeed","parseFloat","target","value","changeElemNumber","event","createArray","animationClick","startAnimation","newArrayClick","changeState","changeArray","type","min","onChange","rowSpan","stopStyle","playStyle","newArrayStyle","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3198edd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavBar.css';\r\n\r\nfunction NavElem({title, algoNumber, setAlgorithm, currentAlgorithm, animationRunning}) {\r\n    function algoChange() {\r\n        if(animationRunning) return;\r\n        setAlgorithm(algoNumber);\r\n    }\r\n\r\n    let className = \"navElem\";\r\n    if(parseInt(algoNumber) === parseInt(currentAlgorithm)) {\r\n        className += \" active\";\r\n    }\r\n    if(animationRunning){\r\n        className += \" disabled\"\r\n    }\r\n\r\n    return (\r\n        <div className={className} onClick={algoChange}>\r\n            <span>{title}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavElem;","import React from 'react';\r\nimport './NavBar.css';\r\nimport NavElem from './NavElem';\r\n\r\nfunction NavBar({algorithm, setAlgorithm, animationRunning}) {\r\n    return (\r\n        <div id=\"navbar\">\r\n            <NavElem title=\"bubblesort\" algoNumber=\"0\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"insertionsort\" algoNumber=\"1\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"mergesort\" algoNumber=\"2\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","let swap;\r\nlet array;\r\n\r\nfunction bubbleSort() {\r\n    for (let n = array.length; n > 1; n--) {\r\n        for (let i = 0; i < n - 1; i++) {\r\n            let a = {\r\n                firstIndex: i,\r\n                elementsSwapped: false\r\n            }\r\n            swap.push(a);\r\n            if (array[i] > array[i + 1]) {\r\n                a = {\r\n                    firstIndex: i,\r\n                    elementsSwapped: true\r\n                }\r\n                let temp = array[i];\r\n                array[i] = array[i + 1];\r\n                array[i + 1] = temp;\r\n                swap.push(a);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getBubbleSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    bubbleSort();\r\n    return swap;\r\n}\r\n\r\nexport { getBubbleSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction insertionSort() {\r\n    for(let i = 0; i < array.length; i++) {\r\n        swap.push({\r\n            firstIndex: i\r\n        });\r\n        let temp = array[i];\r\n        let j = i;\r\n        while(j > 0 && array[j-1] > temp) {\r\n            array[j] = array[j-1];\r\n            j--;\r\n        }\r\n        swap.push({\r\n            firstIndex: i,\r\n            correctPosition: j\r\n        });\r\n        array[j] = temp;\r\n    }\r\n}\r\n\r\nfunction getInsertionSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    insertionSort();\r\n    return swap;\r\n}\r\n\r\nexport { getInsertionSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction mergeSort(l, r) {\r\n    if (r - l === 0) {\r\n        // nothing to do\r\n    } else {\r\n        if (r - l === 1) {\r\n            let a = {\r\n                inMergeSort: true,\r\n                firstIndex: l,\r\n                secondIndex: r,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            if (array[l] > array[r]) {\r\n                let temp = array[l];\r\n                array[l] = array[r];\r\n                array[r] = temp;\r\n                a = {\r\n                    inMergeSort: true,\r\n                    firstIndex: l,\r\n                    secondIndex: r,\r\n                    swapped: true\r\n                }\r\n                swap.push(a);\r\n            }\r\n        } else {\r\n            let i = Math.floor((r + l) / 2);\r\n            let a = {\r\n                inMergeSort: true,\r\n                leftBorder: l,\r\n                rightBorder: r,\r\n                mid: i\r\n            }\r\n            swap.push(a);\r\n            mergeSort(l, i-1);\r\n            mergeSort(i, r);\r\n            merge(l, r, i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction merge(l, r, mid) {\r\n    let j = mid;\r\n    while (j <= r) {\r\n        let a = {\r\n            inMergeSort: false,\r\n            firstIndex: j,\r\n            secondIndex: j-1,\r\n            leftBorder: l,\r\n            rightBorder: r,\r\n            mid: j+1,\r\n            moved: false\r\n        }\r\n        swap.push(a);\r\n        if (array[j] < array[j - 1]) {\r\n            let firstBigger = l;\r\n            for (let x = l; x < j; x++) {\r\n                if (array[x] > array[j]) {\r\n                    firstBigger = x;\r\n                    break;\r\n                }\r\n            }\r\n            for (let x = j; x > firstBigger; x--) {\r\n                let temp = array[x];\r\n                array[x] = array[x - 1];\r\n                array[x - 1] = temp;\r\n            }\r\n            a = {\r\n                inMergeSort: false,\r\n                firstIndex: firstBigger,\r\n                secondIndex: j,\r\n                leftBorder: l,\r\n                rightBorder: r,\r\n                mid: j+1,\r\n                moved: true\r\n            }\r\n            swap.push(a);\r\n        }\r\n        j++;\r\n    }\r\n}\r\n\r\nfunction getMergeSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    mergeSort(0, arr.length-1);\r\n    return swap;\r\n}\r\n\r\nexport { getMergeSortSwap };","import React from 'react';\r\nimport \"./ArrayElem.css\";\r\n\r\nclass ArrayElem extends React.Component {\r\n    render() {\r\n        let className = \"arrayElem\";\r\n        if(this.props.sorted) {\r\n            className += \" sorted\";\r\n        } else {\r\n            if(this.props.special) className += \" \" + this.props.special;\r\n        }\r\n        return (\r\n            <div className={className} style={this.props.style}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayElem;","import React from 'react';\r\nimport './Main.css';\r\nimport ArrayElem from \"./ArrayElem\";\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        let className = \"\";\r\n        if(this.props.sorted === true) className = \"sorted\";\r\n        return (\r\n            <div id=\"mainDiv\" className={className}>\r\n                {this.printArray()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    printArray() {\r\n        let arr = this.props.array;\r\n        let len = arr.length;\r\n        let width = Math.round(1000 / len);\r\n        let margin = Math.floor((600 - len) / 300);\r\n        let first = this.props.firstIndex;\r\n        let second = this.props.secondIndex;\r\n        let leftBorder = this.props.leftBorder;\r\n        let rightBorder = this.props.rightBorder;\r\n        let mid = this.props.mid;\r\n        let notNull = mid !== null && leftBorder !== null && rightBorder !== null;\r\n\r\n        let elemStyle = {\r\n            width: width,\r\n            marginLeft: margin + \"px\"\r\n        }\r\n\r\n        return this.props.array.map(function(c,i,a) {\r\n            let special = null;\r\n            if(leftBorder <= i && i <= rightBorder && notNull) {\r\n                if(i < mid) special = \"leftHalf\";\r\n                else special = \"rightHalf\";\r\n            }\r\n            if(i === first) special = \"firstHighlight\";\r\n            if(i === second) special = \"secondHighlight\";\r\n            return <ArrayElem style={{...elemStyle, height: c + \"px\"}} key={i} array={a} index={i} special={special}/>;\r\n        })\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","export const arrayIsSorted = (arr) => {\r\n    for(let i = 0; i < arr.length -1; i++) {\r\n        if(arr[i] > arr[i+1]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const createNewArray = (elems, max) => {\r\n    let allValues = [...Array(max).keys()];\r\n    let array = [];\r\n    for(let i = 0; i < elems; i++) {\r\n        array[i] = allValues.splice(Math.floor(Math.random() * allValues.length), 1)[0] + 10;\r\n    }\r\n    return array;\r\n}","import React from 'react';\nimport './App.css';\nimport NavBar from \"./Components/Navigation/NavBar\";\nimport Main from \"./Components/Main/Main\";\nimport {arrayIsSorted, createNewArray} from \"./Utils/Functions\";\nimport Animation from \"./Utils/Animation\";\n\nlet animation;\n\nclass App extends React.Component {\n    state = {\n        algorithm: 0,\n        minElems: 5,\n        maxElems: 600,\n        numberOfElements: 100,\n        animationSpeed: 500,\n        animationRunning: false,\n        array: [],\n        firstIndex: null,\n        secondIndex: null,\n        leftBorder: null,\n        rightBorder: null,\n        mid: null,\n        sorted: false\n    }\n\n    setAlgorithm = (nr) => {\n        nr = parseInt(nr);\n        this.setState({algorithm: nr}, () => {\n            animation.changeAlgorithm(nr);\n        });\n    }\n\n    changeSpeed = (e) => {\n        let newSpeed = parseFloat(e.target.value);\n        if(this.state.animationRunning) return;\n        this.setState({animationSpeed: newSpeed});\n        animation.changeSpeed(newSpeed);\n    }\n\n    changeElemNumber = (event) => {\n        if(this.state.animationRunning) return;\n        this.setState({numberOfElements: parseInt(event.target.value)}, () => {\n            this.createArray();\n        });\n    }\n\n    animationClick = () => {\n        if(this.state.animationRunning) {\n            animation.endAnimation();\n            this.setState({animationRunning: false});\n        } else if(this.state.sorted === false) {\n            this.setState({animationRunning: true}, () =>\n            {\n                let success = animation.startAnimation();\n                if(!success) {\n                    this.setState({animationRunning: false});\n                }\n            });\n        }\n    }\n\n    newArrayClick = () => {\n        if (this.state.animationRunning) return;\n        this.createArray();\n    }\n\n    changeState = (e) => {\n        this.setState(e);\n    }\n\n    createArray = () => {\n        let array = createNewArray(this.state.numberOfElements, this.state.maxElems);\n        animation.changeArray(array);\n        this.setState({array});\n        this.setState({sorted: arrayIsSorted(array), firstIndex: null, secondIndex: null, leftBorder: null, rightBorder: null, mid: null});\n    }\n\n    componentDidMount(){\n        animation = new Animation(this.changeState);\n        this.createArray();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar algorithm={this.state.algorithm} animationRunning={this.state.animationRunning} setAlgorithm={this.setAlgorithm}/>\n                <div id=\"settingsDiv\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    <input type=\"range\" min={this.state.minElems} max={this.state.maxElems} value={this.state.numberOfElements} onChange={this.changeElemNumber}/>\n                                </td>\n                                <td className={\"settingsButton\" + (this.state.sorted ? \" disabledSetting\" : \"\")} rowSpan=\"2\" style={this.state.animationRunning ? stopStyle : playStyle} onClick={this.animationClick}>\n                                    {this.state.animationRunning ? \"stop\" : \"start\"}\n                                </td>\n                                <td className={\"settingsButton\" + (this.state.animationRunning ? \" disabled\" : \"\")} rowSpan=\"2\" style={newArrayStyle} onClick={this.newArrayClick}>\n                                    new array\n                                </td>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    <input type=\"range\" min=\"10\" max=\"500\" value={this.state.animationSpeed} onChange={this.changeSpeed}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    {this.state.numberOfElements} elements\n                                </td>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    animation speed\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <Main array={this.state.array}\n                      algorithm={this.state.algorithm}\n                      numberOfElements={this.state.numberOfElements}\n                      animationSpeed={this.state.animationSpeed}\n                      firstIndex={this.state.firstIndex}\n                      secondIndex={this.state.secondIndex}\n                      leftBorder={this.state.leftBorder}\n                      rightBorder={this.state.rightBorder}\n                      mid={this.state.mid}\n                      sorted={this.state.sorted}\n                />\n            </div>\n        )\n    }\n}\n\nconst playStyle = {\n    color: \"lightgreen\"\n}\nconst stopStyle = {\n    color: \"orange\"\n}\n\nconst newArrayStyle = {\n    color: \"lightblue\"\n}\n\nexport default App;\n","import { getBubbleSortSwap } from \"../Algorithms/Bubblesort\";\r\nimport { arrayIsSorted } from \"./Functions\";\r\nimport {getInsertionSortSwap} from \"../Algorithms/Insertionsort\";\r\nimport {getMergeSortSwap} from \"../Algorithms/Mergesort\";\r\n\r\nclass Animation {\r\n    setState;\r\n    array;\r\n    swap;\r\n    algorithm;\r\n    speed;\r\n    interval;\r\n\r\n    constructor(setState) {\r\n        this.setState = setState;\r\n        this.algorithm = 0;\r\n        this.speed = 5;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeAlgorithm(algo) {\r\n        this.algorithm = algo;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeArray(array) {\r\n        this.array = array;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeSpeed(speed) {\r\n        this.speed = 505 - speed;\r\n    }\r\n\r\n    startAnimation() {\r\n        switch (this.algorithm) {\r\n            case 0: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getBubbleSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.bubbleSortStep);\r\n                return true;\r\n            }\r\n            case 1: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getInsertionSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.insertionSortStep);\r\n                return true;\r\n            }\r\n            case 2: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getMergeSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.mergeSortStep);\r\n                return true;\r\n            }\r\n            default: {\r\n                alert(\"error\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    endAnimation(finished) {\r\n        clearInterval(this.interval);\r\n        this.setState({animationRunning: false});\r\n        if(finished) {\r\n            this.setState({firstIndex: null, secondIndex: null, leftBorder: null, rightBorder: null, mid: null});\r\n            if(arrayIsSorted(this.array)) {\r\n                this.setState({sorted: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(step) {\r\n        this.interval = setInterval(() => {\r\n            if(this.swap.length === 0) {\r\n                this.endAnimation(true);\r\n                return;\r\n            }\r\n            step();\r\n        }, this.speed);\r\n    }\r\n\r\n    bubbleSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let first = x.firstIndex;\r\n\r\n        if(x.elementsSwapped === true) {\r\n            let temp = this.array[first];\r\n            this.array[first] = this.array[first+1];\r\n            this.array[first+1] = temp;\r\n            this.setState({array: this.array, firstIndex: first, secondIndex: first+1});\r\n        } else {\r\n            this.setState({firstIndex: first+1, secondIndex: first});\r\n        }\r\n    }\r\n\r\n    insertionSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let firstIndex = x.firstIndex;\r\n        let correctPosition = x.correctPosition;\r\n\r\n        if(correctPosition !== undefined) {\r\n            let temp = this.array[firstIndex];\r\n            for(let j = firstIndex; j > correctPosition; j--) {\r\n                this.array[j] = this.array[j-1];\r\n            }\r\n            this.array[correctPosition] = temp;\r\n            this.setState({array: this.array, firstIndex: null, secondIndex: correctPosition});\r\n        } else {\r\n            this.setState({firstIndex: firstIndex, secondIndex: null});\r\n        }\r\n    }\r\n\r\n    mergeSortStep = () => {\r\n        let x = this.swap.shift();\r\n        if(x.inMergeSort === true) {\r\n            if(x.firstIndex !== undefined) {\r\n                let firstIndex = x.firstIndex;\r\n                let secondIndex = x.secondIndex;\r\n                if(x.swapped === true) {\r\n                    let temp = this.array[firstIndex];\r\n                    this.array[firstIndex] = this.array[secondIndex];\r\n                    this.array[secondIndex] = temp;\r\n                    this.setState({array: this.array, firstIndex: secondIndex, secondIndex: firstIndex});\r\n                } else {\r\n                    this.setState({array: this.array, firstIndex: firstIndex, secondIndex: secondIndex});\r\n                }\r\n            } else {\r\n                this.setState({leftBorder: x.leftBorder, rightBorder: x.rightBorder, mid: x.mid, firstIndex: null, secondIndex: null});\r\n            }\r\n        } else {\r\n            let leftBorder = x.leftBorder;\r\n            let rightBorder = x.rightBorder;\r\n            let mid = x.mid;\r\n            let firstIndex = x.firstIndex;\r\n            let secondIndex = x.secondIndex;\r\n            if(x.moved === false) {\r\n                this.setState({leftBorder: leftBorder, rightBorder: rightBorder, mid: mid, firstIndex: firstIndex, secondIndex: secondIndex});\r\n            } else {\r\n                for(let j = secondIndex; j > firstIndex; j--) {\r\n                    let temp = this.array[j];\r\n                    this.array[j] = this.array[j-1];\r\n                    this.array[j-1] = temp;\r\n                }\r\n                this.setState({array: this.array, leftBorder: leftBorder, rightBorder: rightBorder, mid: mid, firstIndex: firstIndex, secondIndex: secondIndex});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Animation;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}