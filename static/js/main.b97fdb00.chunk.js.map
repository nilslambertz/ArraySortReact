{"version":3,"sources":["Components/Navigation/NavElem.js","Components/Navigation/NavBar.js","Components/Main/ArrayElem.js","Components/Main/Main.js","Utils/Functions.js","Algorithms/Bubblesort.js","App.js","Utils/Animation.js","serviceWorker.js","index.js"],"names":["NavElem","title","algoNumber","setAlgorithm","currentAlgorithm","animationRunning","className","parseInt","onClick","NavBar","algorithm","id","ArrayElem","this","props","sorted","special","style","React","Component","Main","printArray","len","array","length","width","Math","round","margin","floor","first","firstIndex","second","secondIndex","elemStyle","marginLeft","map","c","i","a","height","key","index","createNewArray","elems","max","allValues","Array","keys","splice","random","swap","getBubbleSortSwap","arr","n","elementsSwapped","push","temp","bubbleSort","animation","Animation","setState","speed","algo","slice","animateBubbleSort","alert","finished","clearInterval","interval","arrayIsSorted","setInterval","x","shift","endAnimation","App","state","minElems","maxElems","numberOfElements","animationSpeed","nr","changeAlgorithm","changeSpeed","e","newSpeed","parseFloat","target","value","changeElemNumber","event","createArray","animationClick","startAnimation","newArrayClick","changeState","changeArray","type","min","onChange","rowSpan","stopStyle","playStyle","newArrayStyle","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAwBeA,MArBf,YAAyF,IAAvEC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,WAAYC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,iBAM7DC,EAAY,UAQhB,OAPGC,SAASL,KAAgBK,SAASH,KACjCE,GAAa,WAEdD,IACCC,GAAa,aAIb,yBAAKA,UAAWA,EAAWE,QAd/B,WACOH,GACHF,EAAaD,KAaT,8BAAOD,KCLJQ,MAVf,YAA8D,IAA7CC,EAA4C,EAA5CA,UAAWP,EAAiC,EAAjCA,aAAcE,EAAmB,EAAnBA,iBACtC,OACI,yBAAKM,GAAG,UACJ,kBAAC,EAAD,CAASV,MAAM,aAAaC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBM,EAAWL,iBAAkBA,IACtH,kBAAC,EAAD,CAASJ,MAAM,gBAAgBC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBM,EAAWL,iBAAkBA,IACzH,kBAAC,EAAD,CAASJ,MAAM,YAAYC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBM,EAAWL,iBAAkBA,M,OCQlHO,G,mLAZP,IAAIN,EAAY,YAMhB,OALGO,KAAKC,MAAMC,OACVT,GAAa,UAEVO,KAAKC,MAAME,UAASV,GAAa,IAAMO,KAAKC,MAAME,SAGrD,yBAAKV,UAAWA,EAAWW,MAAOJ,KAAKC,MAAMG,Y,GATjCC,IAAMC,YCkCfC,E,uKA/BP,IAAId,EAAY,GAEhB,OADyB,IAAtBO,KAAKC,MAAMC,SAAiBT,EAAY,UAEvC,yBAAKK,GAAG,UAAUL,UAAWA,GACxBO,KAAKQ,gB,mCAMd,IACIC,EADMT,KAAKC,MAAMS,MACPC,OACVC,EAAQC,KAAKC,MAAM,IAAOL,GAC1BM,EAASF,KAAKG,OAAO,IAAMP,GAAO,KAClCQ,EAAQjB,KAAKC,MAAMiB,WACnBC,EAASnB,KAAKC,MAAMmB,YAEpBC,EAAY,CACZT,MAAOA,EACPU,WAAYP,EAAS,MAGzB,OAAOf,KAAKC,MAAMS,MAAMa,KAAI,SAASC,EAAEC,EAAEC,GACrC,IAAIvB,EAAU,KAGd,OAFGsB,IAAMR,IAAOd,EAAU,kBACvBsB,IAAMN,IAAQhB,EAAU,mBACpB,kBAAC,EAAD,CAAWC,MAAK,2BAAMiB,GAAN,IAAiBM,OAAQH,EAAI,OAAOI,IAAKH,EAAGf,MAAOgB,EAAGG,MAAOJ,EAAGtB,QAASA,W,GA5BzFE,IAAMC,W,OCGZwB,EAAiB,SAACC,EAAOC,GAGlC,IAFA,IAAIC,EAAS,YAAOC,MAAMF,GAAKG,QAC3BzB,EAAQ,GACJe,EAAI,EAAGA,EAAIM,EAAON,IACtBf,EAAMe,GAAKQ,EAAUG,OAAOvB,KAAKG,MAAMH,KAAKwB,SAAWJ,EAAUtB,QAAS,GAAG,GAAK,GAEtF,OAAOD,GCbP4B,EAAO,GACP5B,EAAQ,GAwBZ,SAAS6B,EAAkBC,GAIvB,OAHAF,EAAO,GACP5B,EAAQ8B,EAxBZ,WACI,IAAK,IAAIC,EAAI/B,EAAMC,OAAQ8B,EAAI,EAAGA,IAC9B,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,EAAI,EAAGhB,IAAK,CAC5B,IAAIC,EAAI,CACJR,WAAYO,EACZiB,iBAAiB,GAGrB,GADAJ,EAAKK,KAAKjB,GACNhB,EAAMe,GAAKf,EAAMe,EAAI,GAAI,CACzBC,EAAI,CACAR,WAAYO,EACZiB,iBAAiB,GAErB,IAAIE,EAAOlC,EAAMe,GACjBf,EAAMe,GAAKf,EAAMe,EAAI,GACrBf,EAAMe,EAAI,GAAKmB,EACfN,EAAKK,KAAKjB,KAStBmB,GACOP,E,ICtBPQ,ECyEWC,E,WArEX,WAAYC,GAAW,oBACnBhD,KAAKgD,SAAWA,EAChBhD,KAAKH,UAAY,EACjBG,KAAKiD,MAAQ,EACbjD,KAAKsC,KAAO,G,4DAGAY,GACZlD,KAAKH,UAAYqD,EACjBlD,KAAKsC,KAAO,K,kCAGJ5B,GACRV,KAAKU,MAAQA,EACbV,KAAKsC,KAAO,K,kCAGJW,GACRjD,KAAKiD,MAAQ,IAAMA,I,uCAInB,OAAQjD,KAAKH,WACT,KAAK,EAKD,OAJwB,IAArBG,KAAKsC,KAAK3B,SACTX,KAAKsC,KAAOC,EAAkBvC,KAAKU,MAAMyC,MAAM,KAEnDnD,KAAKoD,qBACE,EAEX,QAEI,OADAC,MAAM,UACC,K,mCAKNC,GACTC,cAAcvD,KAAKwD,UACnBxD,KAAKgD,SAAS,CAACxD,kBAAkB,IAC9B8D,IACCtD,KAAKgD,SAAS,CAAC9B,WAAY,KAAME,YAAa,OHpD7B,SAACoB,GAC1B,IAAI,IAAIf,EAAI,EAAGA,EAAIe,EAAI7B,OAAQ,EAAGc,IAC9B,GAAGe,EAAIf,GAAKe,EAAIf,EAAE,GAAI,OAAO,EAEjC,OAAO,EGiDIgC,CAAczD,KAAKU,QAClBV,KAAKgD,SAAS,CAAC9C,QAAQ,O,0CAKd,IAAD,OAChBF,KAAKwD,SAAWE,aAAY,WACxB,GAAwB,IAArB,EAAKpB,KAAK3B,OAAb,CAIA,IAAIgD,EAAI,EAAKrB,KAAKsB,QACd3C,EAAQ0C,EAAEzC,WAEd,IAAyB,IAAtByC,EAAEjB,gBAA0B,CAC3B,IAAIE,EAAO,EAAKlC,MAAMO,GACtB,EAAKP,MAAMO,GAAS,EAAKP,MAAMO,EAAM,GACrC,EAAKP,MAAMO,EAAM,GAAK2B,EACtB,EAAKI,SAAS,CAACtC,MAAO,EAAKA,MAAOQ,WAAYD,EAAOG,YAAaH,EAAM,SAExE,EAAK+B,SAAS,CAAC9B,WAAYD,EAAM,EAAGG,YAAaH,SAZjD,EAAK4C,cAAa,KAcvB7D,KAAKiD,W,KDnEVa,E,4MACFC,MAAQ,CACJlE,UAAW,EACXmE,SAAU,EACVC,SAAU,IACVC,iBAAkB,IAClBC,eAAgB,IAChB3E,kBAAkB,EAClBkB,MAAO,GACPQ,WAAY,KACZE,YAAa,KACblB,QAAQ,G,EAGZZ,aAAe,SAAC8E,GACZA,EAAK1E,SAAS0E,GACd,EAAKpB,SAAS,CAACnD,UAAWuE,IAAK,WAC3BtB,EAAUuB,gBAAgBD,O,EAIlCE,YAAc,SAACC,GACX,IAAIC,EAAWC,WAAWF,EAAEG,OAAOC,OAChC,EAAKZ,MAAMvE,mBACd,EAAKwD,SAAS,CAACmB,eAAgBK,IAC/B1B,EAAUwB,YAAYE,K,EAG1BI,iBAAmB,SAACC,GACb,EAAKd,MAAMvE,kBACd,EAAKwD,SAAS,CAACkB,iBAAkBxE,SAASmF,EAAMH,OAAOC,SAAS,WAC5D,EAAKG,kB,EAIbC,eAAiB,WACV,EAAKhB,MAAMvE,kBACVsD,EAAUe,eACV,EAAKb,SAAS,CAACxD,kBAAkB,MACL,IAAtB,EAAKuE,MAAM7D,QACjB,EAAK8C,SAAS,CAACxD,kBAAkB,IAAO,WAEtBsD,EAAUkC,kBAEpB,EAAKhC,SAAS,CAACxD,kBAAkB,Q,EAMjDyF,cAAgB,WACR,EAAKlB,MAAMvE,kBACf,EAAKsF,e,EAGTI,YAAc,SAACX,GACX,EAAKvB,SAASuB,I,EAGlBO,YAAc,WACV,IAAIpE,EAAQoB,EAAe,EAAKiC,MAAMG,iBAAkB,EAAKH,MAAME,UACnEnB,EAAUqC,YAAYzE,GACtB,EAAKsC,SAAS,CAACtC,UACf,EAAKsC,SAAS,CAAC9B,WAAY,OAC3B,EAAK8B,SAAS,CAAC5B,YAAa,OAC5B,EAAK4B,SAAS,CAAC9C,QAAQ,K,kEAIvB4C,EAAY,IAAIC,EAAU/C,KAAKkF,aAC/BlF,KAAK8E,gB,+BAIL,OACI,yBAAKrF,UAAU,OACX,kBAAC,EAAD,CAAQI,UAAWG,KAAK+D,MAAMlE,UAAWL,iBAAkBQ,KAAK+D,MAAMvE,iBAAkBF,aAAcU,KAAKV,eAC3G,yBAAKQ,GAAG,eACJ,+BACI,+BACI,4BACI,wBAAIL,UAAYO,KAAK+D,MAAMvE,iBAAmB,WAAa,IACvD,2BAAO4F,KAAK,QAAQC,IAAKrF,KAAK+D,MAAMC,SAAUhC,IAAKhC,KAAK+D,MAAME,SAAUU,MAAO3E,KAAK+D,MAAMG,iBAAkBoB,SAAUtF,KAAK4E,oBAE/H,wBAAInF,UAAW,kBAAoBO,KAAK+D,MAAM7D,OAAS,mBAAqB,IAAKqF,QAAQ,IAAInF,MAAOJ,KAAK+D,MAAMvE,iBAAmBgG,EAAYC,EAAW9F,QAASK,KAAK+E,gBAClK/E,KAAK+D,MAAMvE,iBAAmB,OAAS,SAE5C,wBAAIC,UAAW,kBAAoBO,KAAK+D,MAAMvE,iBAAmB,YAAc,IAAK+F,QAAQ,IAAInF,MAAOsF,EAAe/F,QAASK,KAAKiF,eAApI,aAGA,wBAAIxF,UAAYO,KAAK+D,MAAMvE,iBAAmB,WAAa,IACvD,2BAAO4F,KAAK,QAAQC,IAAI,KAAKrD,IAAI,MAAM2C,MAAO3E,KAAK+D,MAAMI,eAAgBmB,SAAUtF,KAAKsE,gBAGhG,4BACI,wBAAI7E,UAAYO,KAAK+D,MAAMvE,iBAAmB,WAAa,IACtDQ,KAAK+D,MAAMG,iBADhB,aAGA,wBAAIzE,UAAYO,KAAK+D,MAAMvE,iBAAmB,WAAa,IAA3D,uBAOhB,kBAAC,EAAD,CAAMkB,MAAOV,KAAK+D,MAAMrD,MAClBb,UAAWG,KAAK+D,MAAMlE,UACtBqE,iBAAkBlE,KAAK+D,MAAMG,iBAC7BC,eAAgBnE,KAAK+D,MAAMI,eAC3BjD,WAAYlB,KAAK+D,MAAM7C,WACvBE,YAAapB,KAAK+D,MAAM3C,YACxBlB,OAAQF,KAAK+D,MAAM7D,c,GA/GvBG,IAAMC,WAsHlBmF,EAAY,CACdE,MAAO,cAELH,EAAY,CACdG,MAAO,UAGLD,EAAgB,CAClBC,MAAO,aAGI7B,IE9HK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b97fdb00.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavBar.css';\r\n\r\nfunction NavElem({title, algoNumber, setAlgorithm, currentAlgorithm, animationRunning}) {\r\n    function algoChange() {\r\n        if(animationRunning) return;\r\n        setAlgorithm(algoNumber);\r\n    }\r\n\r\n    let className = \"navElem\";\r\n    if(parseInt(algoNumber) === parseInt(currentAlgorithm)) {\r\n        className += \" active\";\r\n    }\r\n    if(animationRunning){\r\n        className += \" disabled\"\r\n    }\r\n\r\n    return (\r\n        <div className={className} onClick={algoChange}>\r\n            <span>{title}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavElem;","import React from 'react';\r\nimport './NavBar.css';\r\nimport NavElem from './NavElem';\r\n\r\nfunction NavBar({algorithm, setAlgorithm, animationRunning}) {\r\n    return (\r\n        <div id=\"navbar\">\r\n            <NavElem title=\"bubblesort\" algoNumber=\"0\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"insertionsort\" algoNumber=\"1\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"mergesort\" algoNumber=\"2\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport \"./ArrayElem.css\";\r\n\r\nclass ArrayElem extends React.Component {\r\n    render() {\r\n        let className = \"arrayElem\";\r\n        if(this.props.sorted) {\r\n            className += \" sorted\";\r\n        } else {\r\n            if(this.props.special) className += \" \" + this.props.special;\r\n        }\r\n        return (\r\n            <div className={className} style={this.props.style}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayElem;","import React from 'react';\r\nimport './Main.css';\r\nimport ArrayElem from \"./ArrayElem\";\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        let className = \"\";\r\n        if(this.props.sorted === true) className = \"sorted\";\r\n        return (\r\n            <div id=\"mainDiv\" className={className}>\r\n                {this.printArray()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    printArray() {\r\n        let arr = this.props.array;\r\n        let len = arr.length;\r\n        let width = Math.round(1000 / len);\r\n        let margin = Math.floor((600 - len) / 300);\r\n        let first = this.props.firstIndex;\r\n        let second = this.props.secondIndex;\r\n\r\n        let elemStyle = {\r\n            width: width,\r\n            marginLeft: margin + \"px\"\r\n        }\r\n\r\n        return this.props.array.map(function(c,i,a) {\r\n            let special = null;\r\n            if(i === first) special = \"firstHighlight\";\r\n            if(i === second) special = \"secondHighlight\";\r\n            return <ArrayElem style={{...elemStyle, height: c + \"px\"}} key={i} array={a} index={i} special={special}/>;\r\n        })\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","export const arrayIsSorted = (arr) => {\r\n    for(let i = 0; i < arr.length -1; i++) {\r\n        if(arr[i] > arr[i+1]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const createNewArray = (elems, max) => {\r\n    let allValues = [...Array(max).keys()];\r\n    let array = [];\r\n    for(let i = 0; i < elems; i++) {\r\n        array[i] = allValues.splice(Math.floor(Math.random() * allValues.length), 1)[0] + 10;\r\n    }\r\n    return array;\r\n}","let swap = [];\r\nlet array = [];\r\n\r\nfunction bubbleSort() {\r\n    for (let n = array.length; n > 1; n--) {\r\n        for (let i = 0; i < n - 1; i++) {\r\n            let a = {\r\n                firstIndex: i,\r\n                elementsSwapped: false\r\n            }\r\n            swap.push(a);\r\n            if (array[i] > array[i + 1]) {\r\n                a = {\r\n                    firstIndex: i,\r\n                    elementsSwapped: true\r\n                }\r\n                let temp = array[i];\r\n                array[i] = array[i + 1];\r\n                array[i + 1] = temp;\r\n                swap.push(a);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getBubbleSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    bubbleSort();\r\n    return swap;\r\n}\r\n\r\nexport { getBubbleSortSwap };","import React from 'react';\nimport './App.css';\nimport NavBar from \"./Components/Navigation/NavBar\";\nimport Main from \"./Components/Main/Main\";\nimport { createNewArray } from \"./Utils/Functions\";\nimport Animation from \"./Utils/Animation\";\n\nlet animation;\n\nclass App extends React.Component {\n    state = {\n        algorithm: 0,\n        minElems: 5,\n        maxElems: 600,\n        numberOfElements: 100,\n        animationSpeed: 500,\n        animationRunning: false,\n        array: [],\n        firstIndex: null,\n        secondIndex: null,\n        sorted: false\n    }\n\n    setAlgorithm = (nr) => {\n        nr = parseInt(nr);\n        this.setState({algorithm: nr}, () => {\n            animation.changeAlgorithm(nr);\n        });\n    }\n\n    changeSpeed = (e) => {\n        let newSpeed = parseFloat(e.target.value);\n        if(this.state.animationRunning) return;\n        this.setState({animationSpeed: newSpeed});\n        animation.changeSpeed(newSpeed);\n    }\n\n    changeElemNumber = (event) => {\n        if(this.state.animationRunning) return;\n        this.setState({numberOfElements: parseInt(event.target.value)}, () => {\n            this.createArray();\n        });\n    }\n\n    animationClick = () => {\n        if(this.state.animationRunning) {\n            animation.endAnimation();\n            this.setState({animationRunning: false});\n        } else if(this.state.sorted === false) {\n            this.setState({animationRunning: true}, () =>\n            {\n                let success = animation.startAnimation();\n                if(!success) {\n                    this.setState({animationRunning: false});\n                }\n            });\n        }\n    }\n\n    newArrayClick = () => {\n        if (this.state.animationRunning) return;\n        this.createArray();\n    }\n\n    changeState = (e) => {\n        this.setState(e);\n    }\n\n    createArray = () => {\n        let array = createNewArray(this.state.numberOfElements, this.state.maxElems);\n        animation.changeArray(array);\n        this.setState({array});\n        this.setState({firstIndex: null});\n        this.setState({secondIndex: null});\n        this.setState({sorted: false});\n    }\n\n    componentDidMount(){\n        animation = new Animation(this.changeState);\n        this.createArray();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar algorithm={this.state.algorithm} animationRunning={this.state.animationRunning} setAlgorithm={this.setAlgorithm}/>\n                <div id=\"settingsDiv\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    <input type=\"range\" min={this.state.minElems} max={this.state.maxElems} value={this.state.numberOfElements} onChange={this.changeElemNumber}/>\n                                </td>\n                                <td className={\"settingsButton\" + (this.state.sorted ? \" disabledSetting\" : \"\")} rowSpan=\"2\" style={this.state.animationRunning ? stopStyle : playStyle} onClick={this.animationClick}>\n                                    {this.state.animationRunning ? \"stop\" : \"start\"}\n                                </td>\n                                <td className={\"settingsButton\" + (this.state.animationRunning ? \" disabled\" : \"\")} rowSpan=\"2\" style={newArrayStyle} onClick={this.newArrayClick}>\n                                    new array\n                                </td>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    <input type=\"range\" min=\"10\" max=\"500\" value={this.state.animationSpeed} onChange={this.changeSpeed}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    {this.state.numberOfElements} elements\n                                </td>\n                                <td className={(this.state.animationRunning ? \"disabled\" : \"\")}>\n                                    animation speed\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <Main array={this.state.array}\n                      algorithm={this.state.algorithm}\n                      numberOfElements={this.state.numberOfElements}\n                      animationSpeed={this.state.animationSpeed}\n                      firstIndex={this.state.firstIndex}\n                      secondIndex={this.state.secondIndex}\n                      sorted={this.state.sorted}\n                />\n            </div>\n        )\n    }\n}\n\nconst playStyle = {\n    color: \"lightgreen\"\n}\nconst stopStyle = {\n    color: \"orange\"\n}\n\nconst newArrayStyle = {\n    color: \"lightblue\"\n}\n\nexport default App;\n","import { getBubbleSortSwap } from \"../Algorithms/Bubblesort\";\r\nimport { arrayIsSorted } from \"./Functions\";\r\n\r\nclass Animation {\r\n    setState;\r\n    array;\r\n    swap;\r\n    algorithm;\r\n    speed;\r\n    interval;\r\n\r\n    constructor(setState) {\r\n        this.setState = setState;\r\n        this.algorithm = 0;\r\n        this.speed = 5;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeAlgorithm(algo) {\r\n        this.algorithm = algo;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeArray(array) {\r\n        this.array = array;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeSpeed(speed) {\r\n        this.speed = 505 - speed;\r\n    }\r\n\r\n    startAnimation() {\r\n        switch (this.algorithm) {\r\n            case 0: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getBubbleSortSwap(this.array.slice(0));\r\n                }\r\n                this.animateBubbleSort();\r\n                return true;\r\n            }\r\n            default: {\r\n                alert(\"error\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    endAnimation(finished) {\r\n        clearInterval(this.interval);\r\n        this.setState({animationRunning: false});\r\n        if(finished) {\r\n            this.setState({firstIndex: null, secondIndex: null});\r\n            if(arrayIsSorted(this.array)) {\r\n                this.setState({sorted: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    animateBubbleSort() {\r\n        this.interval = setInterval(() => {\r\n            if(this.swap.length === 0) {\r\n                this.endAnimation(true);\r\n                return;\r\n            }\r\n            let x = this.swap.shift();\r\n            let first = x.firstIndex;\r\n\r\n            if(x.elementsSwapped === true) {\r\n                let temp = this.array[first];\r\n                this.array[first] = this.array[first+1];\r\n                this.array[first+1] = temp;\r\n                this.setState({array: this.array, firstIndex: first, secondIndex: first+1});\r\n            } else {\r\n                this.setState({firstIndex: first+1, secondIndex: first});\r\n            }\r\n        }, this.speed);\r\n    }\r\n}\r\n\r\nexport default Animation;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}