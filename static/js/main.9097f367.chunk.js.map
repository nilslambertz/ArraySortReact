{"version":3,"sources":["Components/Navigation/NavElem.js","Components/Navigation/NavBar.js","Algorithms/BubbleSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/CoktailShakerSort.js","Algorithms/ShellSort.js","Components/Main/ArrayElem.js","Components/Main/Main.js","Utils/Functions.js","Utils/Animation.js","Components/Settings/SettingsBar.js","App.js","serviceWorker.js","index.js"],"names":["NavElem","title","algoNumber","setAlgorithm","currentAlgorithm","animationRunning","className","parseInt","onClick","NavBar","swap","array","algorithm","id","ArrayElem","this","props","sorted","special","style","React","Component","Main","printArray","href","target","rel","len","length","width","Math","round","margin","floor","first","firstIndex","second","secondIndex","leftBorder","rightBorder","mid","notNull","elemStyle","marginLeft","map","c","i","a","height","key","index","arrayIsSorted","arr","createNewArray","elems","max","allValues","Array","keys","splice","random","index1","index2","temp","getBubbleSortSwap","n","elementsSwapped","push","bubbleSort","getInsertionSortSwap","j","correctPosition","insertionSort","mergeSort","l","r","inMergeSort","swapped","moved","firstBigger","x","merge","quickSort","newSwap","newBorders","partition","getCocktailShakerSortSwap","leftSorted","rightSorted","newLeftsorted","newRightSorted","cocktailShakerSort","getShellSortswap","gap","shellSort","Animation","setState","bubbleSortStep","shift","cocktailshakerSortStep","insertionSortStep","undefined","mergeSortStep","shellSortStep","quickSortStep","speed","algo","slice","animate","getQuickSortSwap","alert","finished","clearInterval","interval","step","setInterval","endAnimation","SettingsBar","animation","maxElems","numberOfElements","animationSpeed","changeElemNumber","newArrayClick","animationClick","changeSpeed","type","min","value","onChange","rowSpan","color","App","state","nr","changeAlgorithm","e","newSpeed","parseFloat","event","createArray","startAnimation","changeState","changeArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAwBeA,MArBf,YAAyF,IAAvEC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,WAAYC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,iBAM7DC,EAAY,UAQhB,OAPGC,SAASL,KAAgBK,SAASH,KACjCE,GAAa,WAEdD,IACCC,GAAa,aAIb,yBAAKA,UAAWA,EAAWE,QAd/B,WACOH,GACHF,EAAaD,KAaT,8BAAOD,KCFJQ,ICjBXC,EACAC,ECDAD,EACAC,ECDAD,EACAC,ECDAD,EACAC,ECDAD,EACAC,ECDAD,EACAC,ENgBWF,EAbf,YAA8D,IAA7CG,EAA4C,EAA5CA,UAAWT,EAAiC,EAAjCA,aAAcE,EAAmB,EAAnBA,iBACtC,OACI,yBAAKQ,GAAG,UACJ,kBAAC,EAAD,CAASZ,MAAM,aAAaC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,IACtH,kBAAC,EAAD,CAASJ,MAAM,qBAAqBC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,IAC9H,kBAAC,EAAD,CAASJ,MAAM,gBAAgBC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,IACzH,kBAAC,EAAD,CAASJ,MAAM,YAAYC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,IACrH,kBAAC,EAAD,CAASJ,MAAM,YAAYC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,IACrH,kBAAC,EAAD,CAASJ,MAAM,YAAYC,WAAW,IAAIC,aAAcA,EAAcC,iBAAkBQ,EAAWP,iBAAkBA,M,OOKlHS,G,mLAZP,IAAIR,EAAY,YAMhB,OALGS,KAAKC,MAAMC,OACVX,GAAa,UAEVS,KAAKC,MAAME,UAASZ,GAAa,IAAMS,KAAKC,MAAME,SAGrD,yBAAKZ,UAAWA,EAAWa,MAAOJ,KAAKC,MAAMG,Y,GATjCC,IAAMC,YC2CfC,E,uKAxCP,IAAIhB,EAAY,GAEhB,OADyB,IAAtBS,KAAKC,MAAMC,SAAiBX,EAAY,UAEvC,yBAAKO,GAAG,UAAUP,UAAWA,GACxBS,KAAKQ,aACN,yBAAKV,GAAG,UAAR,MAAoB,uBAAGW,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,qB,mCAM5B,IACIC,EADMZ,KAAKC,MAAML,MACPiB,OACVC,EAAQC,KAAKC,MAAM,IAAOJ,GAC1BK,EAASF,KAAKG,OAAO,IAAMN,GAAO,KAClCO,EAAQnB,KAAKC,MAAMmB,WACnBC,EAASrB,KAAKC,MAAMqB,YACpBC,EAAavB,KAAKC,MAAMsB,WACxBC,EAAcxB,KAAKC,MAAMuB,YACzBC,EAAMzB,KAAKC,MAAMwB,IACjBC,EAAkB,OAARD,GAA+B,OAAfF,GAAuC,OAAhBC,EAEjDG,EAAY,CACZb,MAAOA,EACPc,WAAYX,EAAS,MAGzB,OAAOjB,KAAKC,MAAML,MAAMiC,KAAI,SAASC,EAAEC,EAAEC,GACrC,IAAI7B,EAAU,KAOd,OANGoB,GAAcQ,GAAKA,GAAKP,GAAeE,IAC1BvB,EAAT4B,EAAIN,EAAe,WACP,aAEhBM,IAAMZ,IAAOhB,EAAU,kBACvB4B,IAAMV,IAAQlB,EAAU,mBACpB,kBAAC,EAAD,CAAWC,MAAK,2BAAMuB,GAAN,IAAiBM,OAAQH,EAAI,OAAOI,IAAKH,EAAGnC,MAAOoC,EAAGG,MAAOJ,EAAG5B,QAASA,W,GArCzFE,IAAMC,W,OCJZ8B,EAAgB,SAACC,GAC1B,IAAI,IAAIN,EAAI,EAAGA,EAAIM,EAAIxB,OAAQ,EAAGkB,IAC9B,GAAGM,EAAIN,GAAKM,EAAIN,EAAE,GAAI,OAAO,EAEjC,OAAO,GAGEO,EAAiB,SAACC,EAAOC,GAGlC,IAFA,IAAIC,EAAS,YAAOC,MAAMF,GAAKG,QAC3B/C,EAAQ,GACJmC,EAAI,EAAGA,EAAIQ,EAAOR,IACtBnC,EAAMmC,GAAKU,EAAUG,OAAO7B,KAAKG,MAAMH,KAAK8B,SAAWJ,EAAU5B,QAAS,GAAG,GAAK,GAEtF,OAAOjB,GAGED,EAAO,SAAC0C,EAAKS,EAAQC,GAC9B,IAAIC,EAAOX,EAAIS,GACfT,EAAIS,GAAUT,EAAIU,GAClBV,EAAIU,GAAUC,GRMlB,SAASC,EAAkBZ,GAIvB,OAHA1C,EAAO,GACPC,EAAQyC,EAxBZ,WACI,IAAK,IAAIa,EAAItD,EAAMiB,OAAQqC,EAAI,EAAGA,IAC9B,IAAK,IAAInB,EAAI,EAAGA,EAAImB,EAAI,EAAGnB,IAAK,CAC5B,IAAIC,EAAI,CACJZ,WAAYW,EACZoB,iBAAiB,GAGrB,GADAxD,EAAKyD,KAAKpB,GACNpC,EAAMmC,GAAKnC,EAAMmC,EAAI,GAAI,CACzBC,EAAI,CACAZ,WAAYW,EACZoB,iBAAiB,GAErB,IAAIH,EAAOpD,EAAMmC,GACjBnC,EAAMmC,GAAKnC,EAAMmC,EAAI,GACrBnC,EAAMmC,EAAI,GAAKiB,EACfrD,EAAKyD,KAAKpB,KAStBqB,GACO1D,ECPX,SAAS2D,EAAqBjB,GAI1B,OAHA1C,EAAO,GACPC,EAAQyC,EArBZ,WACI,IAAI,IAAIN,EAAI,EAAGA,EAAInC,EAAMiB,OAAQkB,IAAK,CAClCpC,EAAKyD,KAAK,CACNhC,WAAYW,IAIhB,IAFA,IAAIiB,EAAOpD,EAAMmC,GACbwB,EAAIxB,EACFwB,EAAI,GAAK3D,EAAM2D,EAAE,GAAKP,GACxBpD,EAAM2D,GAAK3D,EAAM2D,EAAE,GACnBA,IAEJ5D,EAAKyD,KAAK,CACNhC,WAAYW,EACZyB,gBAAiBD,IAErB3D,EAAM2D,GAAKP,GAOfS,GACO9D,ECvBX,SAAS+D,EAAUC,EAAGC,GAClB,GAAIA,EAAID,IAAM,QAGV,GAAIC,EAAID,IAAM,EAAG,CACb,IAAI3B,EAAI,CACJ6B,aAAa,EACbzC,WAAYuC,EACZrC,YAAasC,EACbE,SAAS,GAGb,GADAnE,EAAKyD,KAAKpB,GACNpC,EAAM+D,GAAK/D,EAAMgE,GAAI,CACrB,IAAIZ,EAAOpD,EAAM+D,GACjB/D,EAAM+D,GAAK/D,EAAMgE,GACjBhE,EAAMgE,GAAKZ,EACXhB,EAAI,CACA6B,aAAa,EACbzC,WAAYuC,EACZrC,YAAasC,EACbE,SAAS,GAEbnE,EAAKyD,KAAKpB,QAEX,CACH,IAAID,EAAIhB,KAAKG,OAAO0C,EAAID,GAAK,GACzB3B,EAAI,CACJ6B,aAAa,EACbtC,WAAYoC,EACZnC,YAAaoC,EACbnC,IAAKM,GAETpC,EAAKyD,KAAKpB,GACV0B,EAAUC,EAAG5B,EAAE,GACf2B,EAAU3B,EAAG6B,GAMzB,SAAeD,EAAGC,EAAGnC,GACjB,IAAI8B,EAAI9B,EACR,KAAO8B,GAAKK,GAAG,CACX,IAAI5B,EAAI,CACJ6B,aAAa,EACbzC,WAAYmC,EACZjC,YAAaiC,EAAE,EACfhC,WAAYoC,EACZnC,YAAaoC,EACbnC,IAAK8B,EAAE,EACPQ,OAAO,GAGX,GADApE,EAAKyD,KAAKpB,GACNpC,EAAM2D,GAAK3D,EAAM2D,EAAI,GAAI,CAEzB,IADA,IAAIS,EAAcL,EACTM,EAAIN,EAAGM,EAAIV,EAAGU,IACnB,GAAIrE,EAAMqE,GAAKrE,EAAM2D,GAAI,CACrBS,EAAcC,EACd,MAGR,IAAK,IAAIA,EAAIV,EAAGU,EAAID,EAAaC,IAAK,CAClC,IAAIjB,EAAOpD,EAAMqE,GACjBrE,EAAMqE,GAAKrE,EAAMqE,EAAI,GACrBrE,EAAMqE,EAAI,GAAKjB,EAEnBhB,EAAI,CACA6B,aAAa,EACbzC,WAAY4C,EACZ1C,YAAaiC,EACbhC,WAAYoC,EACZnC,YAAaoC,EACbnC,IAAK8B,EAAE,EACPQ,OAAO,GAEXpE,EAAKyD,KAAKpB,GAEduB,KA1CIW,CAAMP,EAAGC,EAAG7B,ICnCxB,SAASoC,EAAUR,EAAGC,GAClB,KAAGD,GAAKC,GAAR,CAGA,IAAIQ,EAAU,CACVC,YAAY,EACZ9C,WAAYoC,EACZnC,YAAaoC,EACbnC,IAAKV,KAAKG,OAAO0C,EAAID,GAAK,IAE9BhE,EAAKyD,KAAKgB,GACV,IAAIb,EAKR,SAAmBI,EAAGC,GAClB,IAAIK,EAAIrE,EAAMgE,GACV7B,EAAI4B,EACJJ,EAAIK,EAAE,EACV,KAAM7B,EAAIwB,GAAG,CACT,KAAMxB,EAAI6B,GAAKhE,EAAMmC,GAAKkC,GAAG,CACzB,IAAIjC,EAAI,CACJZ,WAAYW,EACZT,YAAaiC,EACbO,SAAS,GAEbnE,EAAKyD,KAAKpB,GACVD,IAEJ,KAAMwB,EAAII,GAAK/D,EAAM2D,IAAMU,GAAG,CAC1B,IAAIjC,EAAI,CACJZ,WAAYW,EACZT,YAAaiC,EACbO,SAAS,GAEbnE,EAAKyD,KAAKpB,GACVuB,IAEJ,GAAGxB,EAAIwB,EAAG,CACN,IAAIP,EAAOpD,EAAMmC,GACjBnC,EAAMmC,GAAKnC,EAAM2D,GACjB3D,EAAM2D,GAAKP,EACX,IAAIhB,EAAI,CACJZ,WAAYW,EACZT,YAAaiC,EACbO,SAAS,GAEbnE,EAAKyD,KAAKpB,IAGlB,GAAGpC,EAAMmC,GAAKkC,EAAG,CACb,IAAIjB,EAAOpD,EAAMmC,GACjBnC,EAAMmC,GAAKnC,EAAMgE,GACjBhE,EAAMgE,GAAKZ,EACX,IAAIhB,EAAI,CACJZ,WAAYW,EACZT,YAAasC,EACbE,SAAS,GAEbnE,EAAKyD,KAAKpB,GAEd,OAAOD,EAnDCuC,CAAUX,EAAGC,GACrBO,EAAUR,EAAGJ,EAAE,GACfY,EAAUZ,EAAE,EAAGK,ICkCnB,SAASW,EAA0BlC,GAI/B,OAHA1C,EAAO,GACPC,EAAQyC,EAjDZ,WAGI,IAFA,IAAImC,EAAa,EACbC,EAAc7E,EAAMiB,OAAO,EACzB2D,GAAcC,GAAa,CAG7B,IAFA,IAAIC,EAAgBD,EAChBE,EAAiBH,EACbzC,EAAIyC,EAAYzC,EAAI0C,EAAY,EAAG1C,IAAK,CAC5C,IAAIC,EAAI,CACJZ,WAAYW,EACZ+B,SAAS,GAGb,GADAnE,EAAKyD,KAAKpB,GACPpC,EAAMmC,GAAKnC,EAAMmC,EAAE,GAAI,CACtB,IAAIiB,EAAOpD,EAAMmC,GACjBnC,EAAMmC,GAAKnC,EAAMmC,EAAE,GACnBnC,EAAMmC,EAAE,GAAKiB,EACbhB,EAAI,CACAZ,WAAYW,EACZ+B,SAAS,GAEbnE,EAAKyD,KAAKpB,GACV2C,EAAiB5C,GAIzB,IAAI,IAAIA,EADR0C,EAAcE,EAAiB,EACN5C,EAAIyC,EAAW,EAAGzC,IAAK,CAC5C,IAAIC,EAAI,CACJZ,WAAYW,EACZ+B,SAAS,GAGb,GADAnE,EAAKyD,KAAKpB,GACPpC,EAAMmC,GAAKnC,EAAMmC,EAAE,GAAI,CACtB,IAAIiB,EAAOpD,EAAMmC,GACjBnC,EAAMmC,GAAKnC,EAAMmC,EAAE,GACnBnC,EAAMmC,EAAE,GAAKiB,EACbhB,EAAI,CACAZ,WAAYW,EACZ+B,SAAS,GAEbnE,EAAKyD,KAAKpB,GACV0C,EAAgB3C,GAGxByC,EAAaE,EAAgB,GAOjCE,GACOjF,ECxBX,SAASkF,EAAiBxC,GAItB,OAHA1C,EAAO,GACPC,EAAQyC,EA7BZ,WAEI,IADA,IACA,MADW,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,GAC1C,eACI,IADA,IAAIyC,EAAG,KACC/C,EAAI+C,EAAK/C,EAAInC,EAAMiB,OAAQkB,IAAK,CACpC,IAAIiB,EAAOpD,EAAMmC,GACbwB,OAAC,EACL,IAAIA,EAAIxB,EAAGwB,GAAKuB,GAAOlF,EAAM2D,EAAIuB,GAAO9B,EAAMO,GAAOuB,EACjDlF,EAAM2D,GAAK3D,EAAM2D,EAAIuB,GAEzBlF,EAAM2D,GAAKP,EACX,IAAIhB,EAAI,CACJZ,WAAYW,EACZT,YAAaiC,EACbO,SAAS,GAEbnE,EAAKyD,KAAKpB,GACVA,EAAI,CACAZ,WAAYW,EACZT,YAAaiC,EACbuB,IAAKA,EACLhB,SAAS,GAEbnE,EAAKyD,KAAKpB,IAQlB+C,GACOpF,E,IImMIqF,E,WApNX,WAAYC,GAAW,IAAD,gCA6FtBC,eAAiB,WACb,IAAIjB,EAAI,EAAKtE,KAAKwF,QACd/D,EAAa6C,EAAE7C,YAEM,IAAtB6C,EAAEd,iBACDxD,EAAK,EAAKC,MAAOwB,EAAYA,EAAW,GACxC,EAAK6D,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAYA,EAAYE,YAAaF,EAAW,KAElF,EAAK6D,SAAS,CAAC7D,WAAYA,EAAW,EAAGE,YAAaF,KArGxC,KAyGtBgE,uBAAyB,WACrB,IAAInB,EAAI,EAAKtE,KAAKwF,QACd/D,EAAa6C,EAAE7C,YAEF,IAAd6C,EAAEH,SACDnE,EAAK,EAAKC,MAAOwB,EAAYA,EAAW,GACxC,EAAK6D,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAYA,EAAYE,YAAaF,EAAW,KAElF,EAAK6D,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAYA,EAAW,EAAGE,YAAaF,KAjH3D,KAqHtBiE,kBAAoB,WAChB,IAAIpB,EAAI,EAAKtE,KAAKwF,QACd/D,EAAa6C,EAAE7C,WACfoC,EAAkBS,EAAET,gBAExB,QAAuB8B,IAApB9B,EAA+B,CAE9B,IADA,IAAIR,EAAO,EAAKpD,MAAMwB,GACdmC,EAAInC,EAAYmC,EAAIC,EAAiBD,IACzC,EAAK3D,MAAM2D,GAAK,EAAK3D,MAAM2D,EAAE,GAEjC,EAAK3D,MAAM4D,GAAmBR,EAC9B,EAAKiC,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAY,KAAME,YAAakC,SAEjE,EAAKyB,SAAS,CAAC7D,WAAYA,EAAYE,YAAa,QAlItC,KAsItBiE,cAAgB,WACZ,IAAItB,EAAI,EAAKtE,KAAKwF,QAClB,IAAqB,IAAlBlB,EAAEJ,YACD,QAAoByB,IAAjBrB,EAAE7C,WAA0B,CAC3B,IAAIA,EAAa6C,EAAE7C,WACfE,EAAc2C,EAAE3C,aACH,IAAd2C,EAAEH,SACDnE,EAAK,EAAKC,MAAOwB,EAAYE,GAC7B,EAAK2D,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAYE,EAAaA,YAAaF,KAExE,EAAK6D,SAAS,CAACrF,MAAO,EAAKA,MAAOwB,WAAYA,EAAYE,YAAaA,SAG3E,EAAK2D,SAAS,CAAC1D,WAAY0C,EAAE1C,WAAYC,YAAayC,EAAEzC,YAAaC,IAAKwC,EAAExC,IAAKL,WAAY,KAAME,YAAa,WAEjH,CACH,IAAIC,EAAa0C,EAAE1C,WACfC,EAAcyC,EAAEzC,YAChBC,EAAMwC,EAAExC,IACRL,EAAa6C,EAAE7C,WACfE,EAAc2C,EAAE3C,YACpB,IAAe,IAAZ2C,EAAEF,MACD,EAAKkB,SAAS,CAAC1D,WAAYA,EAAYC,YAAaA,EAAaC,IAAKA,EAAKL,WAAYA,EAAYE,YAAaA,QAC7G,CACH,IAAI,IAAIiC,EAAIjC,EAAaiC,EAAInC,EAAYmC,IACrC5D,EAAK,EAAKC,MAAO2D,EAAGA,EAAE,GAE1B,EAAK0B,SAAS,CAACrF,MAAO,EAAKA,MAAO2B,WAAYA,EAAYC,YAAaA,EAAaC,IAAKA,EAAKL,WAAYA,EAAYE,YAAaA,OAjKzH,KAsKtBkE,cAAgB,WACZ,IAAIvB,EAAI,EAAKtE,KAAKwF,QACd/D,EAAa6C,EAAE7C,WACfE,EAAc2C,EAAE3C,YACpB,IAAiB,IAAd2C,EAAEH,QAAkB,CACnB,IAEIP,EAFAuB,EAAMb,EAAEa,IACR9B,EAAO,EAAKpD,MAAMwB,GAEtB,IAAImC,EAAInC,EAAYmC,EAAIjC,EAAaiC,GAAQuB,EACzC,EAAKlF,MAAM2D,GAAK,EAAK3D,MAAM2D,EAAIuB,GAEnC,EAAKlF,MAAM2D,GAAKP,EAChB,EAAKiC,SAAS,CAAC7D,WAAYE,EAAaA,YAAaF,SAErD,EAAK6D,SAAS,CAAC7D,WAAYA,EAAYE,YAAaA,KApLtC,KAwLtBmE,cAAgB,WACZ,IAAIxB,EAAI,EAAKtE,KAAKwF,QAClB,IAAoB,IAAjBlB,EAAEI,WACD,EAAKY,SAAS,CACV1D,WAAY0C,EAAE1C,WACdC,YAAayC,EAAEzC,YACfC,IAAKwC,EAAExC,UAER,CACH,IAAIL,EAAa6C,EAAE7C,WACfE,EAAc2C,EAAE3C,aACF,IAAd2C,EAAEH,QACF,EAAKmB,SAAS,CACV7D,WAAYA,EACZE,YAAaA,KAGjB3B,EAAK,EAAKC,MAAOwB,EAAYE,GAC7B,EAAK2D,SAAS,CACVrF,MAAO,EAAKA,MACZwB,WAAYE,EACZA,YAAaF,OA5MzBpB,KAAKiF,SAAWA,EAChBjF,KAAKH,UAAY,EACjBG,KAAK0F,MAAQ,EACb1F,KAAKL,KAAO,G,4DAGAgG,GACZ3F,KAAKH,UAAY8F,EACjB3F,KAAKL,KAAO,K,kCAGJC,GACRI,KAAKJ,MAAQA,EACbI,KAAKL,KAAO,K,kCAGJ+F,GACR1F,KAAK0F,MAAQ,IAAMA,I,uCAInB,OAAQ1F,KAAKH,WACT,KAAK,EAKD,OAJwB,IAArBG,KAAKL,KAAKkB,SACTb,KAAKL,KAAOsD,EAAkBjD,KAAKJ,MAAMgG,MAAM,KAEnD5F,KAAK6F,QAAQ7F,KAAKkF,iBACX,EAEX,KAAK,EAKD,OAJwB,IAArBlF,KAAKL,KAAKkB,SACTb,KAAKL,KAAO2D,EAAqBtD,KAAKJ,MAAMgG,MAAM,KAEtD5F,KAAK6F,QAAQ7F,KAAKqF,oBACX,EAEX,KAAK,EAKD,OAJwB,IAArBrF,KAAKL,KAAKkB,SACTb,KAAKL,MP4BC0C,EO5BuBrC,KAAKJ,MAAMgG,MAAM,GP6B9DjG,EAAO,GACPC,EAAQyC,EACRqB,EAAU,EAAGrB,EAAIxB,OAAO,GACjBlB,IO9BKK,KAAK6F,QAAQ7F,KAAKuF,gBACX,EAEX,KAAK,EAKD,OAJwB,IAArBvF,KAAKL,KAAKkB,SACTb,KAAKL,KNKzB,SAA0B0C,GAItB,OAHA1C,EAAO,GACPC,EAAQyC,EACR8B,EAAU,EAAG9B,EAAIxB,OAAO,GACjBlB,EMTqBmG,CAAiB9F,KAAKJ,MAAMgG,MAAM,KAElD5F,KAAK6F,QAAQ7F,KAAKyF,gBACX,EAEX,KAAK,EAKD,OAJwB,IAArBzF,KAAKL,KAAKkB,SACTb,KAAKL,KAAO4E,EAA0BvE,KAAKJ,MAAMgG,MAAM,KAE3D5F,KAAK6F,QAAQ7F,KAAKoF,yBACX,EAEX,KAAK,EAKD,OAJwB,IAArBpF,KAAKL,KAAKkB,SACTb,KAAKL,KAAOkF,EAAiB7E,KAAKJ,MAAMgG,MAAM,KAElD5F,KAAK6F,QAAQ7F,KAAKwF,gBACX,EAEX,QAEI,OADAO,MAAM,UACC,EPAvB,IAA0B1D,I,mCOKT2D,GACTC,cAAcjG,KAAKkG,UACnBlG,KAAKiF,SAAS,CAAC3F,kBAAkB,IAC9B0G,IACChG,KAAKiF,SAAS,CAAC7D,WAAY,KAAME,YAAa,KAAMC,WAAY,KAAMC,YAAa,KAAMC,IAAK,OAC3FW,EAAcpC,KAAKJ,QAClBI,KAAKiF,SAAS,CAAC/E,QAAQ,O,8BAK3BiG,GAAO,IAAD,OACVnG,KAAKkG,SAAWE,aAAY,WACA,IAArB,EAAKzG,KAAKkB,OAIbsF,IAHI,EAAKE,cAAa,KAIvBrG,KAAK0F,W,WCpCDY,IC/DXC,ED+DWD,EApEf,YAA4J,IAAtIE,EAAqI,EAArIA,SAAUC,EAA2H,EAA3HA,iBAAkBvG,EAAyG,EAAzGA,OAAQZ,EAAiG,EAAjGA,iBAAkBoH,EAA+E,EAA/EA,eAAgBC,EAA+D,EAA/DA,iBAAkBC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,YAczI,OACI,yBAAKhH,GAAG,eACJ,yBAAKA,GAAG,eACJ,2BAAOP,UAAYD,EAAmB,kBAAoB,IACtD,+BACA,4BACI,4BACI,2BAAOyH,KAAK,QAAQC,IApB3B,EAoB0CxE,IAAKgE,EAAUS,MAAOR,EAAkBS,SAAUP,MAG7F,4BACI,4BACKF,EADL,gBAMR,+BACI,+BACA,4BACI,wBAAIlH,UAAW,kBAAoBW,EAAS,kBAAoB,IAAKiH,QAAQ,IAAI/G,MAAOd,EA5B1F,CACd8H,MAAO,UAJO,CACdA,MAAO,cA8B2I3H,QAASoH,GACtIvH,EAAmB,OAAS,YAKzC,2BAAOC,UAAYD,EAAmB,kBAAoB,IACtD,+BACA,4BACI,wBAAIC,UAAU,iBAAiB4H,QAAQ,IAAI/G,MAjCzC,CAClBgH,MAAO,aAgC0E3H,QAASmH,GAA1E,gBAMR,2BAAOrH,UAAYD,EAAmB,kBAAoB,IACtD,+BACA,4BACI,4BACI,2BAAOyH,KAAK,QAAQC,IAAI,KAAKxE,IAAI,MAAMyE,MAAOP,EAAgBQ,SAAUJ,MAGhF,4BACI,qDCuDTO,E,4MAxGXC,MAAQ,CACJzH,UAAW,EACX2G,SAAU,IACVC,iBAAkB,IAClBC,eAAgB,IAChBpH,kBAAkB,EAClBM,MAAO,GACPwB,WAAY,KACZE,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,IAAK,KACLvB,QAAQ,G,EAGZd,aAAe,SAACmI,GACZA,EAAK/H,SAAS+H,GACd,EAAKtC,SAAS,CAACpF,UAAW0H,IAAK,WAC3BhB,EAAUiB,gBAAgBD,GAC1B,EAAKtC,SAAS,CAAC7D,WAAY,KAAME,YAAa,KAAMC,WAAY,KAAMC,YAAa,KAAMC,IAAK,W,EAItGqF,YAAc,SAACW,GACX,IAAIC,EAAWC,WAAWF,EAAE/G,OAAOuG,OAChC,EAAKK,MAAMhI,mBACd,EAAK2F,SAAS,CAACyB,eAAgBgB,IAC/BnB,EAAUO,YAAYY,K,EAG1Bf,iBAAmB,SAACiB,GACb,EAAKN,MAAMhI,kBACd,EAAK2F,SAAS,CAACwB,iBAAkBjH,SAASoI,EAAMlH,OAAOuG,SAAS,WAC5D,EAAKY,kB,EAIbhB,eAAiB,WACV,EAAKS,MAAMhI,kBACViH,EAAUF,eACV,EAAKpB,SAAS,CAAC3F,kBAAkB,MACL,IAAtB,EAAKgI,MAAMpH,QACjB,EAAK+E,SAAS,CAAC3F,kBAAkB,IAAO,WAEtBiH,EAAUuB,kBAEpB,EAAK7C,SAAS,CAAC3F,kBAAkB,Q,EAMjDsH,cAAgB,WACR,EAAKU,MAAMhI,kBACf,EAAKuI,e,EAGTE,YAAc,SAACN,GACX,EAAKxC,SAASwC,I,EAGlBI,YAAc,WACV,IAAIjI,EAAQ0C,EAAe,EAAKgF,MAAMb,iBAAkB,EAAKa,MAAMd,UACnED,EAAUyB,YAAYpI,GACtB,EAAKqF,SAAS,CAACrF,UACf,EAAKqF,SAAS,CAAC/E,OAAQkC,EAAcxC,GAAQwB,WAAY,KAAME,YAAa,KAAMC,WAAY,KAAMC,YAAa,KAAMC,IAAK,Q,kEAI5H8E,EAAY,IAAIvB,EAAUhF,KAAK+H,aAC/B/H,KAAK6H,gB,+BAIL,OACI,yBAAKtI,UAAU,OACX,kBAAC,EAAD,CAAQM,UAAWG,KAAKsH,MAAMzH,UAAWP,iBAAkBU,KAAKsH,MAAMhI,iBAAkBF,aAAcY,KAAKZ,eAC3G,kBAAC,EAAD,CACIoH,SAAUxG,KAAKsH,MAAMd,SACrBC,iBAAkBzG,KAAKsH,MAAMb,iBAC7BvG,OAAQF,KAAKsH,MAAMpH,OACnBZ,iBAAkBU,KAAKsH,MAAMhI,iBAC7BoH,eAAgB1G,KAAKsH,MAAMZ,eAC3BC,iBAAkB3G,KAAK2G,iBACvBC,cAAe5G,KAAK4G,cACpBC,eAAgB7G,KAAK6G,eACrBC,YAAa9G,KAAK8G,cAEtB,kBAAC,EAAD,CAAMlH,MAAOI,KAAKsH,MAAM1H,MAClBC,UAAWG,KAAKsH,MAAMzH,UACtB4G,iBAAkBzG,KAAKsH,MAAMb,iBAC7BC,eAAgB1G,KAAKsH,MAAMZ,eAC3BtF,WAAYpB,KAAKsH,MAAMlG,WACvBE,YAAatB,KAAKsH,MAAMhG,YACxBC,WAAYvB,KAAKsH,MAAM/F,WACvBC,YAAaxB,KAAKsH,MAAM9F,YACxBC,IAAKzB,KAAKsH,MAAM7F,IAChBvB,OAAQF,KAAKsH,MAAMpH,c,GAlGvBG,IAAMC,WCEJ2H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9097f367.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavBar.css';\r\n\r\nfunction NavElem({title, algoNumber, setAlgorithm, currentAlgorithm, animationRunning}) {\r\n    function algoChange() {\r\n        if(animationRunning) return;\r\n        setAlgorithm(algoNumber);\r\n    }\r\n\r\n    let className = \"navElem\";\r\n    if(parseInt(algoNumber) === parseInt(currentAlgorithm)) {\r\n        className += \" active\";\r\n    }\r\n    if(animationRunning){\r\n        className += \" disabled\"\r\n    }\r\n\r\n    return (\r\n        <div className={className} onClick={algoChange}>\r\n            <span>{title}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavElem;","import React from 'react';\r\nimport './NavBar.css';\r\nimport NavElem from './NavElem';\r\n\r\nfunction NavBar({algorithm, setAlgorithm, animationRunning}) {\r\n    return (\r\n        <div id=\"navbar\">\r\n            <NavElem title=\"bubblesort\" algoNumber=\"0\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"cocktailshakersort\" algoNumber=\"4\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"insertionsort\" algoNumber=\"1\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"mergesort\" algoNumber=\"2\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"quicksort\" algoNumber=\"3\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n            <NavElem title=\"shellsort\" algoNumber=\"5\" setAlgorithm={setAlgorithm} currentAlgorithm={algorithm} animationRunning={animationRunning}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","let swap;\r\nlet array;\r\n\r\nfunction bubbleSort() {\r\n    for (let n = array.length; n > 1; n--) {\r\n        for (let i = 0; i < n - 1; i++) {\r\n            let a = {\r\n                firstIndex: i,\r\n                elementsSwapped: false\r\n            }\r\n            swap.push(a);\r\n            if (array[i] > array[i + 1]) {\r\n                a = {\r\n                    firstIndex: i,\r\n                    elementsSwapped: true\r\n                }\r\n                let temp = array[i];\r\n                array[i] = array[i + 1];\r\n                array[i + 1] = temp;\r\n                swap.push(a);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getBubbleSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    bubbleSort();\r\n    return swap;\r\n}\r\n\r\nexport { getBubbleSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction insertionSort() {\r\n    for(let i = 0; i < array.length; i++) {\r\n        swap.push({\r\n            firstIndex: i\r\n        });\r\n        let temp = array[i];\r\n        let j = i;\r\n        while(j > 0 && array[j-1] > temp) {\r\n            array[j] = array[j-1];\r\n            j--;\r\n        }\r\n        swap.push({\r\n            firstIndex: i,\r\n            correctPosition: j\r\n        });\r\n        array[j] = temp;\r\n    }\r\n}\r\n\r\nfunction getInsertionSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    insertionSort();\r\n    return swap;\r\n}\r\n\r\nexport { getInsertionSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction mergeSort(l, r) {\r\n    if (r - l === 0) {\r\n        // nothing to do\r\n    } else {\r\n        if (r - l === 1) {\r\n            let a = {\r\n                inMergeSort: true,\r\n                firstIndex: l,\r\n                secondIndex: r,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            if (array[l] > array[r]) {\r\n                let temp = array[l];\r\n                array[l] = array[r];\r\n                array[r] = temp;\r\n                a = {\r\n                    inMergeSort: true,\r\n                    firstIndex: l,\r\n                    secondIndex: r,\r\n                    swapped: true\r\n                }\r\n                swap.push(a);\r\n            }\r\n        } else {\r\n            let i = Math.floor((r + l) / 2);\r\n            let a = {\r\n                inMergeSort: true,\r\n                leftBorder: l,\r\n                rightBorder: r,\r\n                mid: i\r\n            }\r\n            swap.push(a);\r\n            mergeSort(l, i-1);\r\n            mergeSort(i, r);\r\n            merge(l, r, i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction merge(l, r, mid) {\r\n    let j = mid;\r\n    while (j <= r) {\r\n        let a = {\r\n            inMergeSort: false,\r\n            firstIndex: j,\r\n            secondIndex: j-1,\r\n            leftBorder: l,\r\n            rightBorder: r,\r\n            mid: j+1,\r\n            moved: false\r\n        }\r\n        swap.push(a);\r\n        if (array[j] < array[j - 1]) {\r\n            let firstBigger = l;\r\n            for (let x = l; x < j; x++) {\r\n                if (array[x] > array[j]) {\r\n                    firstBigger = x;\r\n                    break;\r\n                }\r\n            }\r\n            for (let x = j; x > firstBigger; x--) {\r\n                let temp = array[x];\r\n                array[x] = array[x - 1];\r\n                array[x - 1] = temp;\r\n            }\r\n            a = {\r\n                inMergeSort: false,\r\n                firstIndex: firstBigger,\r\n                secondIndex: j,\r\n                leftBorder: l,\r\n                rightBorder: r,\r\n                mid: j+1,\r\n                moved: true\r\n            }\r\n            swap.push(a);\r\n        }\r\n        j++;\r\n    }\r\n}\r\n\r\nfunction getMergeSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    mergeSort(0, arr.length-1);\r\n    return swap;\r\n}\r\n\r\nexport { getMergeSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction quickSort(l, r) {\r\n    if(l >= r) {\r\n        return;\r\n    }\r\n    let newSwap = {\r\n        newBorders: true,\r\n        leftBorder: l,\r\n        rightBorder: r,\r\n        mid: Math.floor((r + l) / 2)\r\n    }\r\n    swap.push(newSwap);\r\n    let j = partition(l, r);\r\n    quickSort(l, j-1);\r\n    quickSort(j+1, r);\r\n}\r\n\r\nfunction partition(l, r) {\r\n    let x = array[r];\r\n    let i = l;\r\n    let j = r-1;\r\n    while(i < j) {\r\n        while(i < r && array[i] < x) {\r\n            let a = {\r\n                firstIndex: i,\r\n                secondIndex: j,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            i++;\r\n        }\r\n        while(j > l && array[j] >= x) {\r\n            let a = {\r\n                firstIndex: i,\r\n                secondIndex: j,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            j--;\r\n        }\r\n        if(i < j) {\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            let a = {\r\n                firstIndex: i,\r\n                secondIndex: j,\r\n                swapped: true\r\n            }\r\n            swap.push(a);\r\n        }\r\n    }\r\n    if(array[i] > x) {\r\n        let temp = array[i];\r\n        array[i] = array[r];\r\n        array[r] = temp;\r\n        let a = {\r\n            firstIndex: i,\r\n            secondIndex: r,\r\n            swapped: true\r\n        }\r\n        swap.push(a);\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getQuickSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    quickSort(0, arr.length-1);\r\n    return swap;\r\n}\r\n\r\nexport { getQuickSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction cocktailShakerSort() {\r\n    let leftSorted = 0;\r\n    let rightSorted = array.length-1;\r\n    while(leftSorted <= rightSorted) {\r\n        let newLeftsorted = rightSorted;\r\n        let newRightSorted = leftSorted;\r\n        for(let i = leftSorted; i < rightSorted+1; i++) {\r\n            let a = {\r\n                firstIndex: i,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            if(array[i] > array[i+1]) {\r\n                let temp = array[i];\r\n                array[i] = array[i+1];\r\n                array[i+1] = temp;\r\n                a = {\r\n                    firstIndex: i,\r\n                    swapped: true\r\n                }\r\n                swap.push(a);\r\n                newRightSorted = i;\r\n            }\r\n        }\r\n        rightSorted = newRightSorted - 1;\r\n        for(let i = rightSorted; i > leftSorted-1; i--) {\r\n            let a = {\r\n                firstIndex: i,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            if(array[i] > array[i+1]) {\r\n                let temp = array[i];\r\n                array[i] = array[i+1];\r\n                array[i+1] = temp;\r\n                a = {\r\n                    firstIndex: i,\r\n                    swapped: true\r\n                }\r\n                swap.push(a);\r\n                newLeftsorted = i;\r\n            }\r\n        }\r\n        leftSorted = newLeftsorted + 1;\r\n    }\r\n}\r\n\r\nfunction getCocktailShakerSortSwap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    cocktailShakerSort();\r\n    return swap;\r\n}\r\n\r\nexport { getCocktailShakerSortSwap };","let swap;\r\nlet array;\r\n\r\nfunction shellSort() {\r\n    let gaps = [701, 301, 132, 57, 23, 10, 4, 1]; // Marcin Ciura's gap sequence\r\n    for(let gap of gaps) {\r\n        for(let i = gap; i < array.length; i++) {\r\n            let temp = array[i];\r\n            let j;\r\n            for(j = i; j >= gap && array[j - gap] > temp; j = j -gap) {\r\n                array[j] = array[j - gap];\r\n            }\r\n            array[j] = temp;\r\n            let a = {\r\n                firstIndex: i,\r\n                secondIndex: j,\r\n                swapped: false\r\n            }\r\n            swap.push(a);\r\n            a = {\r\n                firstIndex: i,\r\n                secondIndex: j,\r\n                gap: gap,\r\n                swapped: true\r\n            }\r\n            swap.push(a);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getShellSortswap(arr) {\r\n    swap = [];\r\n    array = arr;\r\n    shellSort();\r\n    return swap;\r\n}\r\n\r\nexport { getShellSortswap };","import React from 'react';\r\nimport \"./ArrayElem.css\";\r\n\r\nclass ArrayElem extends React.Component {\r\n    render() {\r\n        let className = \"arrayElem\";\r\n        if(this.props.sorted) {\r\n            className += \" sorted\";\r\n        } else {\r\n            if(this.props.special) className += \" \" + this.props.special;\r\n        }\r\n        return (\r\n            <div className={className} style={this.props.style}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayElem;","import React from 'react';\r\nimport './Main.css';\r\nimport ArrayElem from \"./ArrayElem\";\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        let className = \"\";\r\n        if(this.props.sorted === true) className = \"sorted\";\r\n        return (\r\n            <div id=\"mainDiv\" className={className}>\r\n                {this.printArray()}\r\n                <div id=\"footer\">by <a href=\"http://www.nilslambertz.de\" target=\"_blank\" rel=\"noopener noreferrer\">nils lambertz</a></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    printArray() {\r\n        let arr = this.props.array;\r\n        let len = arr.length;\r\n        let width = Math.round(1000 / len);\r\n        let margin = Math.floor((600 - len) / 300);\r\n        let first = this.props.firstIndex;\r\n        let second = this.props.secondIndex;\r\n        let leftBorder = this.props.leftBorder;\r\n        let rightBorder = this.props.rightBorder;\r\n        let mid = this.props.mid;\r\n        let notNull = mid !== null && leftBorder !== null && rightBorder !== null;\r\n\r\n        let elemStyle = {\r\n            width: width,\r\n            marginLeft: margin + \"px\"\r\n        }\r\n\r\n        return this.props.array.map(function(c,i,a) {\r\n            let special = null;\r\n            if(leftBorder <= i && i <= rightBorder && notNull) {\r\n                if(i < mid) special = \"leftHalf\";\r\n                else special = \"rightHalf\";\r\n            }\r\n            if(i === first) special = \"firstHighlight\";\r\n            if(i === second) special = \"secondHighlight\";\r\n            return <ArrayElem style={{...elemStyle, height: c + \"px\"}} key={i} array={a} index={i} special={special}/>;\r\n        })\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","export const arrayIsSorted = (arr) => {\r\n    for(let i = 0; i < arr.length -1; i++) {\r\n        if(arr[i] > arr[i+1]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const createNewArray = (elems, max) => {\r\n    let allValues = [...Array(max).keys()];\r\n    let array = [];\r\n    for(let i = 0; i < elems; i++) {\r\n        array[i] = allValues.splice(Math.floor(Math.random() * allValues.length), 1)[0] + 10;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport const swap = (arr, index1, index2) => {\r\n    let temp = arr[index1];\r\n    arr[index1] = arr[index2];\r\n    arr[index2] = temp;\r\n}","import { getBubbleSortSwap } from \"../Algorithms/BubbleSort\";\r\nimport { arrayIsSorted } from \"./Functions\";\r\nimport {getInsertionSortSwap} from \"../Algorithms/InsertionSort\";\r\nimport {getMergeSortSwap} from \"../Algorithms/MergeSort\";\r\nimport {getQuickSortSwap} from \"../Algorithms/QuickSort\";\r\nimport {getCocktailShakerSortSwap} from \"../Algorithms/CoktailShakerSort\";\r\nimport {getShellSortswap} from \"../Algorithms/ShellSort\";\r\nimport {swap} from \"./Functions\";\r\n\r\nclass Animation {\r\n    setState;\r\n    array;\r\n    swap;\r\n    algorithm;\r\n    speed;\r\n    interval;\r\n\r\n    constructor(setState) {\r\n        this.setState = setState;\r\n        this.algorithm = 0;\r\n        this.speed = 5;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeAlgorithm(algo) {\r\n        this.algorithm = algo;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeArray(array) {\r\n        this.array = array;\r\n        this.swap = [];\r\n    }\r\n\r\n    changeSpeed(speed) {\r\n        this.speed = 505 - speed;\r\n    }\r\n\r\n    startAnimation() {\r\n        switch (this.algorithm) {\r\n            case 0: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getBubbleSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.bubbleSortStep);\r\n                return true;\r\n            }\r\n            case 1: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getInsertionSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.insertionSortStep);\r\n                return true;\r\n            }\r\n            case 2: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getMergeSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.mergeSortStep);\r\n                return true;\r\n            }\r\n            case 3: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getQuickSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.quickSortStep);\r\n                return true;\r\n            }\r\n            case 4: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getCocktailShakerSortSwap(this.array.slice(0));\r\n                }\r\n                this.animate(this.cocktailshakerSortStep);\r\n                return true;\r\n            }\r\n            case 5: {\r\n                if(this.swap.length === 0) {\r\n                    this.swap = getShellSortswap(this.array.slice(0));\r\n                }\r\n                this.animate(this.shellSortStep);\r\n                return true;\r\n            }\r\n            default: {\r\n                alert(\"error\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    endAnimation(finished) {\r\n        clearInterval(this.interval);\r\n        this.setState({animationRunning: false});\r\n        if(finished) {\r\n            this.setState({firstIndex: null, secondIndex: null, leftBorder: null, rightBorder: null, mid: null});\r\n            if(arrayIsSorted(this.array)) {\r\n                this.setState({sorted: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(step) {\r\n        this.interval = setInterval(() => {\r\n            if(this.swap.length === 0) {\r\n                this.endAnimation(true);\r\n                return;\r\n            }\r\n            step();\r\n        }, this.speed);\r\n    }\r\n\r\n    bubbleSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let firstIndex = x.firstIndex;\r\n\r\n        if(x.elementsSwapped === true) {\r\n            swap(this.array, firstIndex, firstIndex+1);\r\n            this.setState({array: this.array, firstIndex: firstIndex, secondIndex: firstIndex+1});\r\n        } else {\r\n            this.setState({firstIndex: firstIndex+1, secondIndex: firstIndex});\r\n        }\r\n    }\r\n\r\n    cocktailshakerSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let firstIndex = x.firstIndex;\r\n\r\n        if(x.swapped === true) {\r\n            swap(this.array, firstIndex, firstIndex+1);\r\n            this.setState({array: this.array, firstIndex: firstIndex, secondIndex: firstIndex+1});\r\n        } else {\r\n            this.setState({array: this.array, firstIndex: firstIndex+1, secondIndex: firstIndex});\r\n        }\r\n    }\r\n\r\n    insertionSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let firstIndex = x.firstIndex;\r\n        let correctPosition = x.correctPosition;\r\n\r\n        if(correctPosition !== undefined) {\r\n            let temp = this.array[firstIndex];\r\n            for(let j = firstIndex; j > correctPosition; j--) {\r\n                this.array[j] = this.array[j-1];\r\n            }\r\n            this.array[correctPosition] = temp;\r\n            this.setState({array: this.array, firstIndex: null, secondIndex: correctPosition});\r\n        } else {\r\n            this.setState({firstIndex: firstIndex, secondIndex: null});\r\n        }\r\n    }\r\n\r\n    mergeSortStep = () => {\r\n        let x = this.swap.shift();\r\n        if(x.inMergeSort === true) {\r\n            if(x.firstIndex !== undefined) {\r\n                let firstIndex = x.firstIndex;\r\n                let secondIndex = x.secondIndex;\r\n                if(x.swapped === true) {\r\n                    swap(this.array, firstIndex, secondIndex);\r\n                    this.setState({array: this.array, firstIndex: secondIndex, secondIndex: firstIndex});\r\n                } else {\r\n                    this.setState({array: this.array, firstIndex: firstIndex, secondIndex: secondIndex});\r\n                }\r\n            } else {\r\n                this.setState({leftBorder: x.leftBorder, rightBorder: x.rightBorder, mid: x.mid, firstIndex: null, secondIndex: null});\r\n            }\r\n        } else {\r\n            let leftBorder = x.leftBorder;\r\n            let rightBorder = x.rightBorder;\r\n            let mid = x.mid;\r\n            let firstIndex = x.firstIndex;\r\n            let secondIndex = x.secondIndex;\r\n            if(x.moved === false) {\r\n                this.setState({leftBorder: leftBorder, rightBorder: rightBorder, mid: mid, firstIndex: firstIndex, secondIndex: secondIndex});\r\n            } else {\r\n                for(let j = secondIndex; j > firstIndex; j--) {\r\n                    swap(this.array, j, j-1);\r\n                }\r\n                this.setState({array: this.array, leftBorder: leftBorder, rightBorder: rightBorder, mid: mid, firstIndex: firstIndex, secondIndex: secondIndex});\r\n            }\r\n        }\r\n    }\r\n\r\n    shellSortStep = () => {\r\n        let x = this.swap.shift();\r\n        let firstIndex = x.firstIndex;\r\n        let secondIndex = x.secondIndex;\r\n        if(x.swapped === true) {\r\n            let gap = x.gap;\r\n            let temp = this.array[firstIndex];\r\n            let j;\r\n            for(j = firstIndex; j > secondIndex; j = j - gap) {\r\n                this.array[j] = this.array[j - gap];\r\n            }\r\n            this.array[j] = temp;\r\n            this.setState({firstIndex: secondIndex, secondIndex: firstIndex});\r\n        } else {\r\n            this.setState({firstIndex: firstIndex, secondIndex: secondIndex});\r\n        }\r\n    }\r\n\r\n    quickSortStep = () => {\r\n        let x = this.swap.shift();\r\n        if(x.newBorders === true) {\r\n            this.setState({\r\n                leftBorder: x.leftBorder,\r\n                rightBorder: x.rightBorder,\r\n                mid: x.mid\r\n            })\r\n        } else {\r\n            let firstIndex = x.firstIndex;\r\n            let secondIndex = x.secondIndex;\r\n            if (x.swapped === false) {\r\n                this.setState({\r\n                    firstIndex: firstIndex,\r\n                    secondIndex: secondIndex\r\n                });\r\n            } else {\r\n                swap(this.array, firstIndex, secondIndex);\r\n                this.setState({\r\n                    array: this.array,\r\n                    firstIndex: secondIndex,\r\n                    secondIndex: firstIndex\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Animation;","import React from 'react';\r\nimport './SettingsBar.css';\r\n\r\nfunction SettingsBar({maxElems, numberOfElements, sorted, animationRunning, animationSpeed, changeElemNumber, newArrayClick, animationClick, changeSpeed}) {\r\n    const minElems = 5;\r\n\r\n    const playStyle = {\r\n        color: \"lightgreen\"\r\n    }\r\n    const stopStyle = {\r\n        color: \"orange\"\r\n    }\r\n\r\n    const newArrayStyle = {\r\n        color: \"lightblue\"\r\n    }\r\n\r\n    return (\r\n        <div id=\"settingsBar\">\r\n            <div id=\"settingsDiv\">\r\n                <table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"range\" min={minElems} max={maxElems} value={numberOfElements} onChange={changeElemNumber}/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            {numberOfElements} elements\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td className={\"settingsButton\" + (sorted ? \" noClickSetting\" : \"\")} rowSpan=\"2\" style={animationRunning ? stopStyle : playStyle} onClick={animationClick}>\r\n                            {animationRunning ? \"stop\" : \"start\"}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td className=\"settingsButton\" rowSpan=\"2\" style={newArrayStyle} onClick={newArrayClick}>\r\n                            new array\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"range\" min=\"10\" max=\"500\" value={animationSpeed} onChange={changeSpeed}/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            animation speed\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingsBar;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from \"./Components/Navigation/NavBar\";\nimport Main from \"./Components/Main/Main\";\nimport {arrayIsSorted, createNewArray} from \"./Utils/Functions\";\nimport Animation from \"./Utils/Animation\";\nimport SettingsBar from \"./Components/Settings/SettingsBar\";\n\nlet animation;\n\nclass App extends React.Component {\n    state = {\n        algorithm: 0,\n        maxElems: 600,\n        numberOfElements: 100,\n        animationSpeed: 500,\n        animationRunning: false,\n        array: [],\n        firstIndex: null,\n        secondIndex: null,\n        leftBorder: null,\n        rightBorder: null,\n        mid: null,\n        sorted: false\n    }\n\n    setAlgorithm = (nr) => {\n        nr = parseInt(nr);\n        this.setState({algorithm: nr}, () => {\n            animation.changeAlgorithm(nr);\n            this.setState({firstIndex: null, secondIndex: null, leftBorder: null, rightBorder: null, mid: null});\n        });\n    }\n\n    changeSpeed = (e) => {\n        let newSpeed = parseFloat(e.target.value);\n        if(this.state.animationRunning) return;\n        this.setState({animationSpeed: newSpeed});\n        animation.changeSpeed(newSpeed);\n    }\n\n    changeElemNumber = (event) => {\n        if(this.state.animationRunning) return;\n        this.setState({numberOfElements: parseInt(event.target.value)}, () => {\n            this.createArray();\n        });\n    }\n\n    animationClick = () => {\n        if(this.state.animationRunning) {\n            animation.endAnimation();\n            this.setState({animationRunning: false});\n        } else if(this.state.sorted === false) {\n            this.setState({animationRunning: true}, () =>\n            {\n                let success = animation.startAnimation();\n                if(!success) {\n                    this.setState({animationRunning: false});\n                }\n            });\n        }\n    }\n\n    newArrayClick = () => {\n        if (this.state.animationRunning) return;\n        this.createArray();\n    }\n\n    changeState = (e) => {\n        this.setState(e);\n    }\n\n    createArray = () => {\n        let array = createNewArray(this.state.numberOfElements, this.state.maxElems);\n        animation.changeArray(array);\n        this.setState({array});\n        this.setState({sorted: arrayIsSorted(array), firstIndex: null, secondIndex: null, leftBorder: null, rightBorder: null, mid: null});\n    }\n\n    componentDidMount(){\n        animation = new Animation(this.changeState);\n        this.createArray();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar algorithm={this.state.algorithm} animationRunning={this.state.animationRunning} setAlgorithm={this.setAlgorithm}/>\n                <SettingsBar\n                    maxElems={this.state.maxElems}\n                    numberOfElements={this.state.numberOfElements}\n                    sorted={this.state.sorted}\n                    animationRunning={this.state.animationRunning}\n                    animationSpeed={this.state.animationSpeed}\n                    changeElemNumber={this.changeElemNumber}\n                    newArrayClick={this.newArrayClick}\n                    animationClick={this.animationClick}\n                    changeSpeed={this.changeSpeed}\n                />\n                <Main array={this.state.array}\n                      algorithm={this.state.algorithm}\n                      numberOfElements={this.state.numberOfElements}\n                      animationSpeed={this.state.animationSpeed}\n                      firstIndex={this.state.firstIndex}\n                      secondIndex={this.state.secondIndex}\n                      leftBorder={this.state.leftBorder}\n                      rightBorder={this.state.rightBorder}\n                      mid={this.state.mid}\n                      sorted={this.state.sorted}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}